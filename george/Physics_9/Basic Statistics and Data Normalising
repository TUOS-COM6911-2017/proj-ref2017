import pandas as pd
import numpy as np

## Stats on Output and Citation

# Load and clean the output file
output_or = pd.read_csv("REF2014Data_output.csv")


# Clear the dataframe to include only values required
output = output_or.drop(output_or.columns[[range(1,27)]], axis=1)
output = output.drop(output.columns[[2,3,4]], axis=1)
# drop all columns that do not contain a value
output = output.dropna()

# Obtain the average citation by count for each UKPRN
unis = output["UKPRN"].unique()

# Total citations per UKPRN
tot_cit = {}

for uni in unis:
    for index, row in output.iterrows():
        #print(row['UKPRN'], row['CitedByCount'])
        if uni == row["UKPRN"]:
            if uni not in tot_cit:
                tot_cit[uni] = row['CitedByCount']
            else:
                tot_cit[uni] += row['CitedByCount']
## CHECKS

len(unis) == len(tot_cit)

# Load the submission profile file and clean it
sub_prof_or = pd.read_csv("REF2014Data_submissionprofile.csv")

# Keep only rows of overall score
subprof = sub_prof_or[sub_prof_or["Profile"].str.contains("Overall")]

# Drop irrelevant columns
subprof = sub_prof_or.drop(sub_prof_or.columns[[1,2,3,5,6,7,8]], axis=1)

# Find the average four star for each uni

tot_fourst = {}
len_uni = {}

for uni in unis:
    for index, row in subprof.iterrows():
        #print(row['UKPRN'], row['CitedByCount'])
        if uni == row["UKPRN"]:
            if uni not in len_uni:
                len_uni[uni] = 1
            else:
                len_uni[uni] += 1
                
            if uni not in tot_fourst:
                tot_fourst[uni] = row['FourStar']
            else:
                tot_fourst[uni] += row['FourStar']
av = {}

for uni in tot_fourst:
    for univ in len_uni:
        if univ == uni:
            av[uni] = tot_fourst[uni]/len_uni[univ]
## CHECKS

len(unis) == len(av)

import matplotlib.pyplot as plt
%matplotlib inline

ava = list(av.values())
totcita = list(tot_cit.values())

fig, ax = plt.subplots(figsize=(16, 8))
ax.set_yscale('log')
plt.plot(totcita, ava, "rx")
plt.title("Log Av. 4* against Total Citations per UKPRN")
ax.set(xlabel = "Citations", ylabel = "Log Four Star")

## Check with three star

# Keep only rows of overall score
subproft = sub_prof_or[sub_prof_or["Profile"].str.contains("Overall")]

# Drop irrelevant columns
subproft = sub_prof_or.drop(sub_prof_or.columns[[1,2,3,4,6,7,8]], axis=1)

# Find the average three star for each uni

tot_three = {}
len_uni = {}

for unit in unis:
    for index, row in subproft.iterrows():
        #print(row['UKPRN'], row['CitedByCount'])
        if unit == row["UKPRN"]:
            if unit not in len_uni:
                len_uni[unit] = 1
            else:
                len_uni[unit] += 1
                
            if unit not in tot_three:
                tot_three[unit] = row['ThreeStar']
            else:
                tot_three[unit] += row['ThreeStar']
avt = {}

for uni in tot_three:
    for univ in len_uni:
        if univ == uni:
            avt[uni] = tot_three[uni]/len_uni[univ]
## CHECKs
len(unis) == len(av)

avta = list(avt.values())

fig, ax = plt.subplots(figsize=(16, 8))
ax.set_yscale('log')
plt.plot(totcita, avta, "rx")
plt.title("Log Av. 3* against Total Citations per UKPRN")
ax.set(xlabel = "Citations", ylabel = "Log 3*")

# Load the submission profile file and clean it
resinc_or = pd.read_csv("REF2014Data_researchincome.csv")

# Drop irrelevant columns
resinc = resinc_or.drop(resinc_or.columns[[1,2,3]], axis=1)

resinc_col_list = list(resinc)

resinc_col_list.remove('UKPRN') 

resinc['TotalInc'] = resinc[resinc_col_list].sum(axis=1)

tot_inc = {}

for item in unis:
    for index, row in resinc.iterrows():
        # return total income normalised
        if item == row["UKPRN"]:
            if item not in tot_inc:
                tot_inc[item] = row['TotalInc']/1000000
            else:
                tot_inc[item] += row['TotalInc']/1000000

tot_inc_l = list(tot_inc.values())

fig, ax = plt.subplots(figsize=(16, 8))
ax.set_yscale('log')
#ax.set_xscale('log')
plt.plot(tot_inc_l, ava, "bx")
plt.title("Log Av. 4* vs. Total income per uni")
ax.set(xlabel = "Total Income (millions)", ylabel = "Log 4*")

fig, ax = plt.subplots(figsize=(16, 8))
ax.set_yscale('log')
#ax.set_xscale('log')
plt.plot(tot_inc_l, avta, "bx")
plt.title("Log Av. 3* vs. Total income per uni")
ax.set(xlabel = "Total Income (millions)", ylabel = "Log 3*")
